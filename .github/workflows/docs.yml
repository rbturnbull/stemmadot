name: docs

on:
  # Runs on pushes targeting the default branch
  push:
    branches: main
      
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write


# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9"]
    steps:
    - uses: actions/checkout@v3
    - name: Setup Pages
      uses: actions/configure-pages@v3
    - name: Install poetry
      run: pipx install poetry
    - name: Install poetry
      run: pipx install poetry
    - name: Initialise Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
        cache: "poetry"
    - name: Install dependencies for Python ${{ matrix.python-version }}
      run: |
        poetry env use "${{ matrix.python-version }}"
        poetry install
    - name: Docs
      run: |
        poetry run sphinx-build -b html docs gh-pages
    - name: Coverage
      run: |
        poetry run coverage run -m pytest
        echo "COVERAGE=$(poetry run coverage report --precision 2 | grep TOTAL | tr -s ' ' | cut -f 4 -d " ")" >> $GITHUB_ENV
        poetry run coverage html --directory gh-pages/coverage
        rm -f gh-pages/coverage/.gitignore
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v1
      with:
        path: gh-pages
    - name: Create Coverage Badge
      uses: schneegans/dynamic-badges-action@v1.1.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: 7e847e177b0b427bfb0fe89bd2f6be5a
        filename: coverage-badge.json
        label: coverage
        message: ${{ env.COVERAGE }}
        color: green
